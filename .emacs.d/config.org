#+title Emacs config

* Cleaner folders config

** Keep custom vars out of config file

#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
#+end_src

** Keep backup files in the same backup dir

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("" . "~/.emacs.d/backups")))
#+end_src

** Keep undo tree files in a undos dir

#+begin_src emacs-lisp
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undos")))
#+end_src

* Package setup

** Setup package.el to work with MELPA

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
  (package-refresh-contents)
#+end_src

** use-package setup

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* UI and style config

** Basic GUI settings

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src 

** Show relative line numbers in gutter

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)

  ;; Disable for certain modes
  (dolist (mode '(eshell-mode-hook
		  term-mode-hook))
    (add-hook mode (lambda() (display-line-numbers-mode 0))))
#+end_src

** Show column number in modeline

#+begin_src emacs-lisp
  (column-number-mode)
#+end_src

** Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		      :font "SauceCodePro Nerd Font 14"
		      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
		      :font "SauceCodePro Nerd Font 14"
		      :weight 'medium)
  (add-to-list 'default-frame-alist '(font . "SauceCodePro Nerd Font 14"))
#+end_src

** Theme (palenight from doom-themes)

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-palenight t))
#+end_src

** Modeline (doom-modeline)

#+begin_src emacs-lisp
  (use-package doom-modeline
    :custom
    (doom-modeline-project-detection 'projectile)
    (doom-modeline-buffer-file-name-style 'relative-to-project)
    (doom-modeline-workspace-name t)
    :init (doom-modeline-mode t))
#+end_src

** Icons

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src

** Enable colors in compilation buffer

#+begin_src emacs-lisp
  (use-package ansi-color
    :hook (compilation-filter . ansi-color-compilation-filter)) 
#+end_src

* Dashboard

#+begin_src emacs-lisp
  (use-package page-break-lines
  :config
    (page-break-lines-mode))

  (use-package dashboard
    :config
    (dashboard-setup-startup-hook))
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))) ;; To display in client mode windows
  (setq dashboard-center-content t) ;; Center content in the window
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-items '(
			  (projects  . 5) ;; Display 5 last projects
			  (recents   . 5) ;; Display 5 last opened files
			  (bookmarks . 5))) ;; Display 5 bookmarks
  (setq dashboard-set-heading-icons t) ;; Icons for sections
  (setq dashboard-set-file-icons t) ;; Icons for items
  (setq dashboard-set-init-info nil) ;; Disable package load time info

  ;; Function to open/reopen dashboard
  (defun open-dashboard ()
    "Jump to the dashboard buffer, if doesn't exists create one."
    (interactive)
    (switch-to-buffer dashboard-buffer-name)
    (dashboard-mode)
    (dashboard-insert-startupify-lists)
    (dashboard-refresh-buffer))
#+end_src

* Bindings

** Remap <escape> to exit prompts

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** General package for leader key bindings

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)
    (general-create-definer my/leader-keys
      :keymaps '(normal visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (my/leader-keys
      "d"      'dired
      "e"      'dired-jump
      "f"      'find-file
      "q"      'open-dashboard
      "RET"    'eshell))
#+end_src

** Evil mode for vim like key bindings

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

** Evil lion for text aligning

#+begin_src emacs-lisp
  (use-package evil-lion
    :hook
    (evil-mode . evil-lion-mode))
#+end_src

** Evil surround

#+begin_src emacs-lisp
  (use-package evil-surround
    :hook
    (evil-mode . evil-surround-mode))
#+end_src

** Evil commentary to comment blocks of code

#+begin_src emacs-lisp
  (use-package evil-commentary
    :hook
    (evil-mode . evil-commentary-mode))
#+end_src

* Configuration of built-in utilities

** Dired

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands
    (dired dired-jump)
    :custom
    ((dired-listing-switches "-agho --group-directories-first")))

  (use-package dired-single
    :defer t)

  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer)
#+end_src

** Eshell

#+begin_src emacs-lisp
  (use-package eshell-z
    :hook ((eshell-mode . (lambda () (require 'eshell-z)))
	   (eshell-z-change-dir .  (lambda () (eshell/pushd (eshell/pwd))))))

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode 1))
#+end_src

* Packages

** Utility

*** which-key

#+begin_src emacs-lisp
  (use-package which-key
    :init
    (setq which-key-popup-type 'minibuffer)
    (setq which-key-idle-delay 0.5)
    :config (which-key-mode))
#+end_src

*** Prescient for better completion filtering
*** Smartparens

#+begin_src emacs-lisp
  (use-package prescient
  (use-package smartparens
    :config
    (prescient-persist-mode))
    (require 'smartparens-config))
#+end_src

  (use-package ivy-prescient
    :after ivy
    :config
    (ivy-prescient-mode))

  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode))
#+end_src

*** ivy, swiper and counsel for completion in minibuffer

#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)	
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
  (use-package counsel
    :after ivy
    :config (counsel-mode)
    :bind ("M-x" . counsel-M-x)
    ("C-x b" . counsel-ibuffer)
    ("C-x C-f" . counsel-find-file))
  (use-package swiper
    :after ivy)

  ;; Ivy-rich for even better ivy
  (use-package ivy-rich
    :init (ivy-rich-mode 1)
    :config (setq ivy-rich-path-style 'abbrev))
#+end_src

** Programming

*** LSP-mode for IDE like features

#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-l")
    :commands (lsp lsp-deferred)
    :hook (prog-mode . lsp-deferred)
    :config (setq lsp-warn-no-matched-clients 'nil))

  (use-package company
    :after lsp-mode
    :hook (prog-mode . company-mode)
    :bind (:map company-active-map
		("<tab>" . company-complete-selection))
    (:map lsp-mode-map
	  ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    (setq local company-backends '((company-capf))))

  (use-package flycheck
    :defer)

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :init
    (setq lsp-ui-doc-position 'at-point))
#+end_src

*** Treesitter for better syntax highlighting

#+begin_src emacs-lisp
  (use-package tree-sitter
    :config
    ;; activate tree-sitter on any buffer containing code for which it has a parser available
    (global-tree-sitter-mode)
    ;; you can easily see the difference tree-sitter-hl-mode makes for python, ts or tsx
    ;; by switching on and off
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :after tree-sitter)
#+end_src

*** format-all for code formatting on save

#+begin_src emacs-lisp
  (use-package format-all
    :after lsp-mode
    :hook
    (format-all-mode . format-all-ensure-formatter)
    (lsp-mode . format-all-mode))
#+end_src

*** Projectile for projects management

#+begin_src emacs-lisp
  (use-package projectile
    :diminish (projectile-mode)
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap ("C-c p" . projectile-command-map))
  ;; integration with counsel
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src


#+end_src

*** Magit for better git workflow

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

*** diff-hl for highlighting changes in gutter

#+begin_src emacs-lisp
  (use-package diff-hl
    :custom-face
    '(diff-hl-change ((t (:background (doom-color 'yellow))))) 
    '(diff-hl-insert ((t (:background (doom-color 'green))))) 
    '(diff-hl-delete ((t (:background (doom-color 'red))))) 
    :init
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    :config
    (global-diff-hl-mode)
    (diff-hl-flydiff-mode)
    (diff-hl-dired-mode))
#+end_src

*** Ocaml specific config

#+begin_src emacs-lisp
  (let ((opam-share (ignore-errors (car (process-lines "opam" "var" "share")))))
    (when (and opam-share (file-directory-p opam-share))
      ;; Register Mcerlin
      (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
      (autoload 'merlin-mode "merlin" nil t nil)
      ;; Automatically start it in OCaml buffers
      (add-hook 'tuareg-mode-hook 'merlin-mode t)
      (add-hook 'caml-mode-hook 'merlin-mode t)
      ;; Use opam switch to lookup ocamlmerlin binary
      (setq merlin-command 'opam)))
#+end_src

** Misc

*** undo-tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :after evil
    :diminish
    :config
    (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode 1))
#+end_src

*** Helpful

#+begin_src emacs-lisp
  (use-package helpful
    :bind
    ("C-h f"   . helpful-callable)
    ("C-h v"   . helpful-variable)
    ("C-h h"   . helpful-key)
    ("C-h C-d" . helpful-at-point)
    ("C-h F"   . helpful-function)
    ("C-h C"   . helpful-command))
#+end_src

*** Ledger mode

#+begin_src emacs-lisp
  (use-package ledger-mode
    :init
    (setq ledger-clear-whole-transaction 1)
    :mode "\\.dat\\'")
#+end_src
