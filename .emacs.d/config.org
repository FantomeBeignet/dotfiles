#+title Emacs config

* Cleaner folders config

** Keep custom vars out of config file

#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
#+end_src

** Keep backup files in the same backup dir

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("" . "~/.emacs.d/backups")))
#+end_src

** Keep undo tree files in a undos dir

#+begin_src emacs-lisp
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undos")))
#+end_src

* Package setup

** Setup package.el to work with MELPA

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
  (package-refresh-contents)
#+end_src

** use-package setup

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* UI and style config

** Basic GUI settings

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src 

** Show relative line numbers in gutter

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)

  ;; Disable for certain modes
  (dolist (mode '(eshell-mode-hook
		  term-mode-hook))
    (add-hook mode (lambda() (display-line-numbers-mode 0))))
#+end_src

** Show column number in modeline

#+begin_src emacs-lisp
  (column-number-mode)
#+end_src

** Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		      :font "SauceCodePro Nerd Font 14"
		      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
		      :font "SauceCodePro Nerd Font 14"
		      :weight 'medium)
  (add-to-list 'default-frame-alist '(font . "SauceCodePro Nerd Font 14"))
#+end_src

** Theme (palenight from doom-themes)

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-palenight t))
#+end_src

** Modeline (doom-modeline)

#+begin_src emacs-lisp
  (use-package doom-modeline
    :custom
    (doom-modeline-project-detection 'projectile)
    (doom-modeline-buffer-file-name-style 'relative-to-project)
    (doom-modeline-workspace-name t)
    :init (doom-modeline-mode t))
#+end_src

** Icons

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src

** Enable colors in compilation buffer

#+begin_src emacs-lisp
  (use-package ansi-color
    :hook (compilation-filter . ansi-color-compilation-filter)) 
#+end_src

* Dashboard

#+begin_src emacs-lisp
  (use-package page-break-lines
  :config
    (page-break-lines-mode))

  (use-package dashboard
    :config
    (dashboard-setup-startup-hook))
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))) ;; To display in client mode windows
  (setq dashboard-center-content t) ;; Center content in the window
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-items '(
			  (projects  . 5) ;; Display 5 last projects
			  (recents   . 5) ;; Display 5 last opened files
			  (bookmarks . 5))) ;; Display 5 bookmarks
  (setq dashboard-set-heading-icons t) ;; Icons for sections
  (setq dashboard-set-file-icons t) ;; Icons for items
  (setq dashboard-set-init-info nil) ;; Disable package load time info

  ;; Function to open/reopen dashboard
  (defun open-dashboard ()
    "Jump to the dashboard buffer, if doesn't exists create one."
    (interactive)
    (switch-to-buffer dashboard-buffer-name)
    (dashboard-mode)
    (dashboard-insert-startupify-lists)
    (dashboard-refresh-buffer))
#+end_src

* Bindings

** Remap <escape> to exit prompts

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** General package for leader key bindings

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)
    (general-create-definer my/leader-keys
      :keymaps '(normal visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (my/leader-keys
      "d"      'dired
      "e"      'dired-jump
      "f"      'find-file
      "q"      'open-dashboard
      "RET"    'eshell))
#+end_src

** Evil mode for vim like key bindings

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

** Evil lion for text aligning

#+begin_src emacs-lisp
  (use-package evil-lion
    :init
    (evil-lion-mode))
#+end_src

** Evil surround

#+begin_src emacs-lisp
  (use-package evil-surround
    :init
    (evil-surround-mode))
#+end_src

** Evil commentary to comment blocks of code

#+begin_src emacs-lisp
  (use-package evil-commentary
    :init
    (evil-commentary-mode))
#+end_src

* Configuration of default editor functionnalities

** Auto-revert to automatically refresh buffer

#+begin_src emacs-lisp
  (global-auto-revert-mode)
#+end_src

** Dired

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands
    (dired dired-jump)
    :custom
    ((dired-listing-switches "-agho --group-directories-first")))

  (use-package dired-single
    :defer t)

  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer)

  (use-package all-the-icons-dired
    :after all-the-icons
    :init
    (setq all-the-icons-dired-monochrome nil)
    :hook
    (dired-mode . all-the-icons-dired-mode))
#+end_src

** Eshell

#+begin_src emacs-lisp
  (use-package eshell-z
    :hook ((eshell-mode . (lambda () (require 'eshell-z)))
	   (eshell-z-change-dir .  (lambda () (eshell/pushd (eshell/pwd))))))

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode 1))
#+end_src

** Auto switch to compilation buffer

#+begin_src emacs-lisp
  (add-hook 'compilation-finish-functions 'switch-to-buffer-other-window 'compilation)
#+end_src

* Packages

** Utility

*** which-key

#+begin_src emacs-lisp
  (use-package which-key
    :init
    (setq which-key-popup-type 'minibuffer)
    (setq which-key-idle-delay 0.5)
    :config (which-key-mode))
#+end_src

*** Smartparens

#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config))
#+end_src

** Completion frameworks

*** Savehist to save search history

#+begin_src emacs-lisp
    (use-package savehist
      :config
      (setq history-length 25)
      (savehist-mode 1))
#+end_src

*** Orderless completion style

#+begin_src emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

*** Consult for completion in minibuffer

#+begin_src emacs-lisp
  (defun my/get-project-root ()
    (when (fboundp 'projectile-project-root)
      (projectile-project-root)))

  (use-package consult
    :bind (("C-s" . consult-line)
	   :map minibuffer-local-map
	   ("C-r" . consult-history))
    :custom
    (consult-project-root-function #'my/get-project-root)
    (completion-in-region-function #'consult-completion-in-region))
  (my/leader-keys
    "m" 'consult-man
    "b" 'consult-buffer
    "o" 'consult-file-externally)
#+end_src

*** Consult for completion at point

#+begin_src emacs-lisp
  (use-package corfu
    :bind (:map corfu-map
		("C-j" . corfu-next)
		("C-k" . corfu-previous))
    :hook (eshell-mode-hook . (lambda ()
				(setq-local corfu-auto nil)
				(corfu-mode)))
    :init
    (setq corfu-auto t
	  corfu-auto-prefix 1
	  corfu-preselect-first t
	  corfu-preview-current t
	  corfu-quit-no-match 'separator
	  corfu-cycle t
	  corfu-min-width 40
	  corfu-scroll-margin 4)
    (global-corfu-mode)
    (corfu-history-mode))

  (use-package corfu-popupinfo
    :after corfu
    :ensure nil
    :init
    (corfu-popupinfo-mode))

  (defun corfu-send-shell (&rest _)
    "Send completion candidate when inside comint/eshell."
    (cond
     ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
      (eshell-send-input))
     ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
      (comint-send-input))))
  (advice-add #'corfu-insert :after #'corfu-send-shell)

  (use-package kind-icon
    :after corfu
    :custom
    (kind-icon-use-icons nil)
    (kind-icon-default-face 'corfu-default)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

*** Vertico for minibuffer completion

#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)
    (setq vertico-cycle t)
    :bind (:map vertico-map
		("C-j" . vertico-next)
		("C-k" . vertico-previous)
		("C-f" . vertico-exit)))

  (use-package vertico-directory
    :after vertico
    :ensure nil
    :bind (:map vertico-map
		("DEL" . vertico-directory-up)
		("DEL" . vertico-directory-delete-char))
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

*** Marginalia for better minibuffer annotations

#+begin_src emacs-lisp
  (use-package marginalia
    :bind (:map minibuffer-local-map
		("M-A" . marginalia-cycle))
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    (marginalia-align 'right)
    :init
    (marginalia-mode))

  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+end_src

*** Tempel for snippets

#+begin_src emacs-lisp
  (use-package tempel
    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
	   ("M-*" . tempel-insert))
    :init
    (defun tempel-setup-capf ()
     (setq-local completion-at-point-functions
		  (cons #'tempel-complete
			completion-at-point-functions)))

    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)
    (add-hook 'org-mode-hook 'tempel-setup-capf)

    (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
    (global-tempel-abbrev-mode))
#+end_src

*** Cape for better capfs

#+begin_src emacs-lisp
  (use-package cape)

  (defun my/eglot-tempel-capf ()
    (setq-local completion-at-point-functions
		(list (cape-super-capf
		       #'tempel-complete
		       #'eglot-completion-at-point))))
  (add-hook #'eglot-managed-mode-hook #'my/eglot-tempel-capf)
#+end_src

** Programming

*** Eglot for lsp feature

#+begin_src emacs-lisp
  (use-package eglot
    :custom
    (eglot-autoshutdown t)
    :init
    (setq completion-category-defaults nil))

  (use-package consult-eglot)

  (add-hook 'eglot-managed-mode-hook
	    (lambda ()
	      (add-hook 'before-save-hook #'eglot-format-buffer nil t)))
#+end_src

*** Flycheck for syntax checking on the fly

#+begin_src emacs-lisp
  (use-package flycheck
    :defer)
#+end_src

*** Languages

**** Typescript

#+begin_src emacs-lisp
  (use-package typescript-mode
    :init
    (define-derived-mode typescript-tsx-mode typescript-mode "TSX")
    (add-to-list 'auto-mode-alist `(,(rx ".tsx" eos) . typescript-tsx-mode))
    :custom
    (typescript-indent-level 2))
  (add-hook 'typescript-mode-hook 'eglot-ensure)
#+end_src

**** Svelte

#+begin_src emacs-lisp
  (use-package web-mode
    :init
    (setq
     web-mode-enable-auto-closing t
     web-mode-enable-auto-opening t
     web-mode-enable-auto-expanding t))

  (add-to-list 'auto-mode-alist '("\\.svelte\\'" . web-mode))

  (add-to-list 'web-mode-content-types-alist '("svelte" . "\\.svelte\\'"))

  (defun my/svelte-mode-hook ()
    (setq web-mode-svelte-indent-offset 2))

  (add-hook 'web-mode-hook 'my/svelte-mode-hook)

  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
		 `(web-mode . ,(eglot-alternatives
				'(("svelteserver" "--stdio"))))))

  (add-hook 'web-mode-hook 'eglot-ensure)
#+end_src

**** Ocaml specific config

#+begin_src emacs-lisp
  (let ((opam-share (ignore-errors (car (process-lines "opam" "var" "share")))))
    (when (and opam-share (file-directory-p opam-share))
      ;; Register Mcerlin
      (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
      (autoload 'merlin-mode "merlin" nil t nil)
      ;; Automatically start it in OCaml buffers
      (add-hook 'tuareg-mode-hook 'merlin-mode t)
      (add-hook 'caml-mode-hook 'merlin-mode t)
      ;; Use opam switch to lookup ocamlmerlin binary
      (setq merlin-command 'opam)))
  (add-hook 'caml-mode-hook 'eglot-ensure)
  (add-hook 'tuareg-mode-hook 'eglot-ensure)

  (require 'opam-user-setup "~/.emacs.d/opam-user-setup.el")

  (use-package dune)

  (use-package tuareg
    :init
    (setq tuareg-match-patterns-aligned t))
#+end_src

**** Java

#+begin_src emacs-lisp
  (use-package lsp-java)
  (add-hook 'java-mode-hook 'eglot-ensure)
#+end_src

**** C

#+begin_src emacs-lisp
  (add-hook 'c-mode-hook 'eglot-ensure)
#+end_src

*** Treesitter for better syntax highlighting

#+begin_src emacs-lisp
  (use-package tree-sitter
    :config
    ;; activate tree-sitter on any buffer containing code for which it has a parser available
    (global-tree-sitter-mode)
    ;; you can easily see the difference tree-sitter-hl-mode makes for python, ts or tsx
    ;; by switching on and off
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :after tree-sitter)
#+end_src

*** Projectile for projects management

#+begin_src emacs-lisp
  (use-package projectile
    :diminish (projectile-mode)
    :config (projectile-mode)
    :bind-keymap ("C-c p" . projectile-command-map))

  (use-package consult-projectile)

  (my/leader-keys
    "pp" 'consult-projectile-switch-project
    "pf" 'consult-projectile-find-file
    "pd" 'consult-projectile-find-dir
    "pb" 'consult-projectile-switch-to-buffer
    "pr" 'consult-projectile-recentf
    "pc" 'projectile-compile-project
    "pt" 'projectile-test-project
    "pe" 'projectile-dired)
#+end_src

*** Magit for better git workflow

#+begin_src emacs-lisp
  (use-package magit)

  (with-eval-after-load 'evil
    (add-hook 'git-commit-mode-hook 'evil-insert-state)
    (evil-set-initial-state 'magit-log-edit-mode 'insert))

  (my/leader-keys
    "gs" 'magit-status
    "gc" 'magit-commit
    "gP" 'magit-push
    "gp" 'magit-pull
    "gl" 'magit-log-current
    "gf" 'magit-fetch)

  (use-package magit-todos
    :init
    (magit-todos-mode))
#+end_src

*** diff-hl for highlighting changes in gutter

#+begin_src emacs-lisp
  (use-package diff-hl
    :init
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    :config
    (global-diff-hl-mode)
    (diff-hl-flydiff-mode)
    (diff-hl-dired-mode))
#+end_src

** Misc

*** undo-tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :after evil
    :diminish
    :config
    (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode 1))
#+end_src

*** Helpful

#+begin_src emacs-lisp
  (use-package helpful
    :bind
    ("C-h f"   . helpful-callable)
    ("C-h v"   . helpful-variable)
    ("C-h h"   . helpful-key)
    ("C-h C-d" . helpful-at-point)
    ("C-h F"   . helpful-function)
    ("C-h C"   . helpful-command))
#+end_src

*** Ledger mode

#+begin_src emacs-lisp
  (use-package ledger-mode
    :init
    (setq ledger-clear-whole-transaction 1)
    :mode "\\.dat\\'")
#+end_src
